import { changeRoomSceneHandler } from "./GameNetworking/Server/Handlers/changeRoomSceneHandler.js";
import { createObjectHandler } from "./GameNetworking/Server/Handlers/createObjectHandler.js";
import { getRoomsListHandler } from "./GameNetworking/Server/Handlers/getRoomsListHandler.js";
import { raiseEventHandler } from "./GameNetworking/Server/Handlers/raiseEventHandler.js";
import { removeObjectHandler } from "./GameNetworking/Server/Handlers/removeObjectHandler.js";
import { roomCreationHandler } from "./GameNetworking/Server/Handlers/roomCreationHandler.js";
import { roomDisconnectHandler } from "./GameNetworking/Server/Handlers/roomDisconnectHandler.js";
import { roomJoinHandler } from "./GameNetworking/Server/Handlers/roomJoinHandler.js";
import { server } from "./GameNetworking/Server/server.js";
import { objectsUpdateHandler } from "./UDP/Handlers/objectsUpdateHandler.js";
import { UdpServer } from "./UDP/UdpServer.js";
import { JsonCompressor } from "./Utils/JsonCompressor.js";
JsonCompressor.init(256);
let udpServer = new UdpServer();
let gameServer = new server(udpServer);
let handlers = [];
let udpHandlers = [];
handlers.push(new roomCreationHandler(gameServer));
handlers.push(new roomJoinHandler(gameServer));
handlers.push(new roomDisconnectHandler(gameServer));
handlers.push(new createObjectHandler(gameServer));
handlers.push(new removeObjectHandler(gameServer));
handlers.push(new getRoomsListHandler(gameServer));
handlers.push(new raiseEventHandler(gameServer));
handlers.push(new changeRoomSceneHandler(gameServer));
udpHandlers.push(new objectsUpdateHandler(udpServer, gameServer));
udpServer.initHandlers(udpHandlers);
gameServer.initHandlers(handlers);
gameServer.start();
//# sourceMappingURL=index.js.map